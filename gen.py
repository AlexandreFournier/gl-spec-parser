#!/usr/bin/python
'''The OpenGL bindings generator'''

__author__    = 'Alexandre Fournier'
__license__   = 'Boost Software License, Version 1.0'
__copyright__ = '2011, Alexandre Fournier <af at liquidstate.eu>'
__version__   = '0.1'

import os
import sys
import re

from textwrap import wrap
from datetime import datetime
from lxml import etree
from urllib import urlretrieve
from urlparse import urlparse
from string import Template

CACHE_PATH = 'cache'
GITHUB_URL = 'https://github.com/AlexandreFournier/gl-spec-parser'
GENERATION = '''
YOU DO NOT NEED TO EDIT THIS FILE DIRECTLY\n
It was automatically generated by %s using templates on %s
Please contact the author or visit the project page for more information:\n
%s
''' % (sys.argv[0], str(datetime.now()), GITHUB_URL)

# Caching should be done in urllib
class Resolver(etree.Resolver):
	'''A DTD resolver with caching'''
	@staticmethod
	def cache(system_url):
		url = urlparse(system_url)
		if url.scheme == '':
			if url.path.startswith(CACHE_PATH):
				system_url = system_url.replace(CACHE_PATH, 'http:/') # not safe
				url = urlparse(system_url)
		if url.scheme == 'http':
			urlPath, urlFile = os.path.split(url.path)
			urlPath = url.hostname + urlPath
			locPath = os.path.join(CACHE_PATH, urlPath) 
			locFile = os.path.join(locPath, urlFile)
			if not os.path.exists(locPath):
				os.makedirs(locPath)
			if not os.path.exists(locFile):
				print 'retrieving %s' % system_url
				urlretrieve(system_url, locFile)
				if system_url in FIXES:
					print 'fixing %s' % system_url
					fixed = FIXES[system_url](open(locFile).read())
					open(locFile, 'w').write(fixed);
			return locFile
		return None

	def resolve(self, system_url, system_id, context):
		file = Resolver.cache(system_url)
		if not file == None:
			return self.resolve_filename(file, context)

# Registering the Resolver as the default DTD resolver
parser = etree.XMLParser(load_dtd=True)
parser.resolvers.add(Resolver())
etree.set_default_parser(parser)

URLS = {
	'gl2' : {
		'format' : 'docbook',
		'base' : 'http://www.opengl.org/sdk/docs/man/',
		'list' : [
			'glAccum.xml',
			'glActiveTexture.xml',
			'glAlphaFunc.xml',
			'glAreTexturesResident.xml',
			'glArrayElement.xml',
			'glAttachShader.xml',
			'glBeginQuery.xml',
			'glBegin.xml',
			'glBindAttribLocation.xml',
			'glBindBuffer.xml',
			'glBindTexture.xml',
			'glBitmap.xml',
			'glBlendColor.xml',
			'glBlendEquationSeparate.xml',
			'glBlendEquation.xml',
			'glBlendFuncSeparate.xml',
			'glBlendFunc.xml',
			'glBufferData.xml',
			'glBufferSubData.xml',
			'glCallLists.xml',
			'glCallList.xml',
			'glClearAccum.xml',
			'glClearColor.xml',
			'glClearDepth.xml',
			'glClearIndex.xml',
			'glClearStencil.xml',
			'glClear.xml',
			'glClientActiveTexture.xml',
			'glClipPlane.xml',
			'glColorMask.xml',
			'glColorMaterial.xml',
			'glColorPointer.xml',
			'glColorSubTable.xml',
			'glColorTableParameter.xml',
			'glColorTable.xml',
			'glColor.xml',
			'glCompileShader.xml',
			'glCompressedTexImage1D.xml',
			'glCompressedTexImage2D.xml',
			'glCompressedTexImage3D.xml',
			'glCompressedTexSubImage1D.xml',
			'glCompressedTexSubImage2D.xml',
			'glCompressedTexSubImage3D.xml',
			'glConvolutionFilter1D.xml',
			'glConvolutionFilter2D.xml',
			'glConvolutionParameter.xml',
			'glCopyColorSubTable.xml',
			'glCopyColorTable.xml',
			'glCopyConvolutionFilter1D.xml',
			'glCopyConvolutionFilter2D.xml',
			'glCopyPixels.xml',
			'glCopyTexImage1D.xml',
			'glCopyTexImage2D.xml',
			'glCopyTexSubImage1D.xml',
			'glCopyTexSubImage2D.xml',
			'glCopyTexSubImage3D.xml',
			'glCreateProgram.xml',
			'glCreateShader.xml',
			'glCullFace.xml',
			'glDeleteBuffers.xml',
			'glDeleteLists.xml',
			'glDeleteProgram.xml',
			'glDeleteQueries.xml',
			'glDeleteShader.xml',
			'glDeleteTextures.xml',
			'glDepthFunc.xml',
			'glDepthMask.xml',
			'glDepthRange.xml',
			'glDetachShader.xml',
			'glDrawArrays.xml',
			'glDrawBuffers.xml',
			'glDrawBuffer.xml',
			'glDrawElements.xml',
			'glDrawPixels.xml',
			'glDrawRangeElements.xml',
			'glEdgeFlagPointer.xml',
			'glEdgeFlag.xml',
			'glEnableClientState.xml',
			'glEnableVertexAttribArray.xml',
			'glEnable.xml',
			'glEvalCoord.xml',
			'glEvalMesh.xml',
			'glEvalPoint.xml',
			'glFeedbackBuffer.xml',
			'glFinish.xml',
			'glFlush.xml',
			'glFogCoordPointer.xml',
			'glFogCoord.xml',
			'glFog.xml',
			'glFrontFace.xml',
			'glFrustum.xml',
			'glGenBuffers.xml',
			'glGenLists.xml',
			'glGenQueries.xml',
			'glGenTextures.xml',
			'glGetActiveAttrib.xml',
			'glGetActiveUniform.xml',
			'glGetAttachedShaders.xml',
			'glGetAttribLocation.xml',
			'glGetBufferParameteriv.xml',
			'glGetBufferPointerv.xml',
			'glGetBufferSubData.xml',
			'glGetClipPlane.xml',
			'glGetColorTableParameter.xml',
			'glGetColorTable.xml',
			'glGetCompressedTexImage.xml',
			'glGetConvolutionFilter.xml',
			'glGetConvolutionParameter.xml',
			'glGetError.xml',
			'glGetHistogramParameter.xml',
			'glGetHistogram.xml',
			'glGetLight.xml',
			'glGetMap.xml',
			'glGetMaterial.xml',
			'glGetMinmaxParameter.xml',
			'glGetMinmax.xml',
			'glGetPixelMap.xml',
			'glGetPointerv.xml',
			'glGetPolygonStipple.xml',
			'glGetProgramInfoLog.xml',
			'glGetProgram.xml',
			'glGetQueryiv.xml',
			'glGetQueryObject.xml',
			'glGetSeparableFilter.xml',
			'glGetShaderInfoLog.xml',
			'glGetShaderSource.xml',
			'glGetShader.xml',
			'glGetString.xml',
			'glGetTexEnv.xml',
			'glGetTexGen.xml',
			'glGetTexImage.xml',
			'glGetTexLevelParameter.xml',
			'glGetTexParameter.xml',
			'glGetUniformLocation.xml',
			'glGetUniform.xml',
			'glGetVertexAttribPointerv.xml',
			'glGetVertexAttrib.xml',
			'glGet.xml',
			'glHint.xml',
			'glHistogram.xml',
			'glIndexMask.xml',
			'glIndexPointer.xml',
			'glIndex.xml',
			'glInitNames.xml',
			'glInterleavedArrays.xml',
			'glIsBuffer.xml',
			'glIsEnabled.xml',
			'glIsList.xml',
			'glIsProgram.xml',
			'glIsQuery.xml',
			'glIsShader.xml',
			'glIsTexture.xml',
			'glLightModel.xml',
			'glLight.xml',
			'glLineStipple.xml',
			'glLineWidth.xml',
			'glLinkProgram.xml',
			'glListBase.xml',
			'glLoadIdentity.xml',
			'glLoadMatrix.xml',
			'glLoadName.xml',
			'glLoadTransposeMatrix.xml',
			'glLogicOp.xml',
			'glMap1.xml',
			'glMap2.xml',
			'glMapBuffer.xml',
			'glMapGrid.xml',
			'glMaterial.xml',
			'glMatrixMode.xml',
			'glMinmax.xml',
			'glMultiDrawArrays.xml',
			'glMultiDrawElements.xml',
			'glMultiTexCoord.xml',
			'glMultMatrix.xml',
			'glMultTransposeMatrix.xml',
			'glNewList.xml',
			'glNormalPointer.xml',
			'glNormal.xml',
			'glOrtho.xml',
			'glPassThrough.xml',
			'glPixelMap.xml',
			'glPixelStore.xml',
			'glPixelTransfer.xml',
			'glPixelZoom.xml',
			'glPointParameter.xml',
			'glPointSize.xml',
			'glPolygonMode.xml',
			'glPolygonOffset.xml',
			'glPolygonStipple.xml',
			'glPrioritizeTextures.xml',
			'glPushAttrib.xml',
			'glPushClientAttrib.xml',
			'glPushMatrix.xml',
			'glPushName.xml',
			'glRasterPos.xml',
			'glReadBuffer.xml',
			'glReadPixels.xml',
			'glRect.xml',
			'glRenderMode.xml',
			'glResetHistogram.xml',
			'glResetMinmax.xml',
			'glRotate.xml',
			'glSampleCoverage.xml',
			'glScale.xml',
			'glScissor.xml',
			'glSecondaryColorPointer.xml',
			'glSecondaryColor.xml',
			'glSelectBuffer.xml',
			'glSeparableFilter2D.xml',
			'glShadeModel.xml',
			'glShaderSource.xml',
			'glStencilFuncSeparate.xml',
			'glStencilFunc.xml',
			'glStencilMaskSeparate.xml',
			'glStencilMask.xml',
			'glStencilOpSeparate.xml',
			'glStencilOp.xml',
			'glTexCoordPointer.xml',
			'glTexCoord.xml',
			'glTexEnv.xml',
			'glTexGen.xml',
			'glTexImage1D.xml',
			'glTexImage2D.xml',
			'glTexImage3D.xml',
			'glTexParameter.xml',
			'glTexSubImage1D.xml',
			'glTexSubImage2D.xml',
			'glTexSubImage3D.xml',
			'glTranslate.xml',
			'glUniform.xml',
			'glUseProgram.xml',
			'glValidateProgram.xml',
			'glVertexAttribPointer.xml',
			'glVertexAttrib.xml',
			'glVertexPointer.xml',
			'glVertex.xml',
			'glViewport.xml',
			'glWindowPos.xml',
		]
	},
	'gl3' : {
		'format' : 'docbook',
		'base' : 'http://www.opengl.org/sdk/docs/man3/',
		'list' : [
			'glActiveTexture.xml',
			'glAttachShader.xml',
			'glBeginConditionalRender.xml',
			'glBeginQuery.xml',
			'glBeginTransformFeedback.xml',
			'glBindAttribLocation.xml',
			'glBindBufferBase.xml',
			'glBindBufferRange.xml',
			'glBindBuffer.xml',
			'glBindFragDataLocationIndexed.xml',
			'glBindFragDataLocation.xml',
			'glBindFramebuffer.xml',
			'glBindRenderbuffer.xml',
			'glBindSampler.xml',
			'glBindTexture.xml',
			'glBindVertexArray.xml',
			'glBlendColor.xml',
			'glBlendEquationSeparate.xml',
			'glBlendEquation.xml',
			'glBlendFuncSeparate.xml',
			'glBlendFunc.xml',
			'glBlitFramebuffer.xml',
			'glBufferData.xml',
			'glBufferSubData.xml',
			'glCheckFramebufferStatus.xml',
			'glClampColor.xml',
			'glClearBuffer.xml',
			'glClearColor.xml',
			'glClearDepth.xml',
			'glClearStencil.xml',
			'glClear.xml',
			'glClientWaitSync.xml',
			'glColorMask.xml',
			'glCompileShader.xml',
			'glCompressedTexImage1D.xml',
			'glCompressedTexImage2D.xml',
			'glCompressedTexImage3D.xml',
			'glCompressedTexSubImage1D.xml',
			'glCompressedTexSubImage2D.xml',
			'glCompressedTexSubImage3D.xml',
			'glCopyBufferSubData.xml',
			'glCopyTexImage1D.xml',
			'glCopyTexImage2D.xml',
			'glCopyTexSubImage1D.xml',
			'glCopyTexSubImage2D.xml',
			'glCopyTexSubImage3D.xml',
			'glCreateProgram.xml',
			'glCreateShader.xml',
			'glCullFace.xml',
			'glDeleteBuffers.xml',
			'glDeleteFramebuffers.xml',
			'glDeleteProgram.xml',
			'glDeleteQueries.xml',
			'glDeleteRenderbuffers.xml',
			'glDeleteSamplers.xml',
			'glDeleteShader.xml',
			'glDeleteSync.xml',
			'glDeleteTextures.xml',
			'glDeleteVertexArrays.xml',
			'glDepthFunc.xml',
			'glDepthMask.xml',
			'glDepthRange.xml',
			'glDetachShader.xml',
			'glDrawArraysInstanced.xml',
			'glDrawArrays.xml',
			'glDrawBuffers.xml',
			'glDrawBuffer.xml',
			'glDrawElementsBaseVertex.xml',
			'glDrawElementsInstancedBaseVertex.xml',
			'glDrawElementsInstanced.xml',
			'glDrawElements.xml',
			'glDrawRangeElementsBaseVertex.xml',
			'glDrawRangeElements.xml',
			'glEnableVertexAttribArray.xml',
			'glEnable.xml',
			'glFenceSync.xml',
			'glFinish.xml',
			'glFlushMappedBufferRange.xml',
			'glFlush.xml',
			'glFramebufferRenderbuffer.xml',
			'glFramebufferTextureLayer.xml',
			'glFramebufferTexture.xml',
			'glFrontFace.xml',
			'glGenBuffers.xml',
			'glGenerateMipmap.xml',
			'glGenFramebuffers.xml',
			'glGenQueries.xml',
			'glGenRenderbuffers.xml',
			'glGenSamplers.xml',
			'glGenTextures.xml',
			'glGenVertexArrays.xml',
			'glGetActiveAttrib.xml',
			'glGetActiveUniformBlockName.xml',
			'glGetActiveUniformBlock.xml',
			'glGetActiveUniformName.xml',
			'glGetActiveUniformsiv.xml',
			'glGetActiveUniform.xml',
			'glGetAttachedShaders.xml',
			'glGetAttribLocation.xml',
			'glGetBufferParameteriv.xml',
			'glGetBufferParameter.xml',
			'glGetBufferPointerv.xml',
			'glGetBufferSubData.xml',
			'glGetCompressedTexImage.xml',
			'glGetError.xml',
			'glGetFragDataIndex.xml',
			'glGetFragDataLocation.xml',
			'glGetFramebufferAttachmentParameter.xml',
			'glGetMultisample.xml',
			'glGetProgramInfoLog.xml',
			'glGetProgram.xml',
			'glGetQueryiv.xml',
			'glGetQueryObject.xml',
			'glGetRenderbufferParameter.xml',
			'glGetSamplerParameter.xml',
			'glGetShaderInfoLog.xml',
			'glGetShaderSource.xml',
			'glGetShader.xml',
			'glGetString.xml',
			'glGetSync.xml',
			'glGetTexImage.xml',
			'glGetTexLevelParameter.xml',
			'glGetTexParameter.xml',
			'glGetTransformFeedbackVarying.xml',
			'glGetUniformBlockIndex.xml',
			'glGetUniformIndices.xml',
			'glGetUniformLocation.xml',
			'glGetUniform.xml',
			'glGetVertexAttribPointerv.xml',
			'glGetVertexAttrib.xml',
			'glGet.xml',
			'glHint.xml',
			'glIsBuffer.xml',
			'glIsEnabled.xml',
			'glIsFramebuffer.xml',
			'glIsProgram.xml',
			'glIsQuery.xml',
			'glIsRenderbuffer.xml',
			'glIsSampler.xml',
			'glIsShader.xml',
			'glIsSync.xml',
			'glIsTexture.xml',
			'glIsVertexArray.xml',
			'glLineWidth.xml',
			'glLinkProgram.xml',
			'glLogicOp.xml',
			'glMapBufferRange.xml',
			'glMapBuffer.xml',
			'glMultiDrawArrays.xml',
			'glMultiDrawElementsBaseVertex.xml',
			'glMultiDrawElements.xml',
			'glMultiTexCoord.xml',
			'glPixelStore.xml',
			'glPointParameter.xml',
			'glPointSize.xml',
			'glPolygonMode.xml',
			'glPolygonOffset.xml',
			'glPrimitiveRestartIndex.xml',
			'glProvokingVertex.xml',
			'glQueryCounter.xml',
			'glReadBuffer.xml',
			'glReadPixels.xml',
			'glRenderbufferStorageMultisample.xml',
			'glRenderbufferStorage.xml',
			'glSampleCoverage.xml',
			'glSampleMaski.xml',
			'glSamplerParameter.xml',
			'glScissor.xml',
			'glShaderSource.xml',
			'glStencilFuncSeparate.xml',
			'glStencilFunc.xml',
			'glStencilMaskSeparate.xml',
			'glStencilMask.xml',
			'glStencilOpSeparate.xml',
			'glStencilOp.xml',
			'glTexBuffer.xml',
			'glTexImage1D.xml',
			'glTexImage2DMultisample.xml',
			'glTexImage2D.xml',
			'glTexImage3DMultisample.xml',
			'glTexImage3D.xml',
			'glTexParameter.xml',
			'glTexSubImage1D.xml',
			'glTexSubImage2D.xml',
			'glTexSubImage3D.xml',
			'glTransformFeedbackVaryings.xml',
			'glUniformBlockBinding.xml',
			'glUniform.xml',
			'glUseProgram.xml',
			'glValidateProgram.xml',
			'glVertexAttribDivisor.xml',
			'glVertexAttribPointer.xml',
			'glVertexAttrib.xml',
			'glViewport.xml',
			'glWaitSync.xml',
		]
	},
	'gl4' : {
		'format' : 'docbook',
		'base' : 'http://www.opengl.org/sdk/docs/man4/',
		'list' : [
			'glActiveShaderProgram.xml',
			'glActiveTexture.xml',
			'glAttachShader.xml',
			'glBeginConditionalRender.xml',
			'glBeginQueryIndexed.xml',
			'glBeginQuery.xml',
			'glBeginTransformFeedback.xml',
			'glBindAttribLocation.xml',
			'glBindBufferBase.xml',
			'glBindBufferRange.xml',
			'glBindBuffer.xml',
			'glBindFragDataLocationIndexed.xml',
			'glBindFragDataLocation.xml',
			'glBindFramebuffer.xml',
			'glBindProgramPipeline.xml',
			'glBindRenderbuffer.xml',
			'glBindSampler.xml',
			'glBindTexture.xml',
			'glBindTransformFeedback.xml',
			'glBindVertexArray.xml',
			'glBlendColor.xml',
			'glBlendEquationSeparate.xml',
			'glBlendEquation.xml',
			'glBlendFuncSeparate.xml',
			'glBlendFunc.xml',
			'glBlitFramebuffer.xml',
			'glBufferData.xml',
			'glBufferSubData.xml',
			'glCheckFramebufferStatus.xml',
			'glClampColor.xml',
			'glClearBuffer.xml',
			'glClearColor.xml',
			'glClearDepth.xml',
			'glClearStencil.xml',
			'glClear.xml',
			'glClientWaitSync.xml',
			'glColorMask.xml',
			'glCompileShader.xml',
			'glCompressedTexImage1D.xml',
			'glCompressedTexImage2D.xml',
			'glCompressedTexImage3D.xml',
			'glCompressedTexSubImage1D.xml',
			'glCompressedTexSubImage2D.xml',
			'glCompressedTexSubImage3D.xml',
			'glCopyBufferSubData.xml',
			'glCopyTexImage1D.xml',
			'glCopyTexImage2D.xml',
			'glCopyTexSubImage1D.xml',
			'glCopyTexSubImage2D.xml',
			'glCopyTexSubImage3D.xml',
			'glCreateProgram.xml',
			'glCreateShaderProgram.xml',
			'glCreateShader.xml',
			'glCullFace.xml',
			'glDeleteBuffers.xml',
			'glDeleteFramebuffers.xml',
			'glDeleteProgramPipelines.xml',
			'glDeleteProgram.xml',
			'glDeleteQueries.xml',
			'glDeleteRenderbuffers.xml',
			'glDeleteSamplers.xml',
			'glDeleteShader.xml',
			'glDeleteSync.xml',
			'glDeleteTextures.xml',
			'glDeleteTransformFeedbacks.xml',
			'glDeleteVertexArrays.xml',
			'glDepthFunc.xml',
			'glDepthMask.xml',
			'glDepthRangeArray.xml',
			'glDepthRangeIndexed.xml',
			'glDepthRange.xml',
			'glDetachShader.xml',
			'glDrawArraysIndirect.xml',
			'glDrawArraysInstanced.xml',
			'glDrawArrays.xml',
			'glDrawBuffers.xml',
			'glDrawBuffer.xml',
			'glDrawElementsBaseVertex.xml',
			'glDrawElementsIndirect.xml',
			'glDrawElementsInstancedBaseVertex.xml',
			'glDrawElementsInstanced.xml',
			'glDrawElements.xml',
			'glDrawRangeElementsBaseVertex.xml',
			'glDrawRangeElements.xml',
			'glDrawTransformFeedbackStream.xml',
			'glDrawTransformFeedback.xml',
			'glEnableVertexAttribArray.xml',
			'glEnable.xml',
			'glFenceSync.xml',
			'glFinish.xml',
			'glFlushMappedBufferRange.xml',
			'glFlush.xml',
			'glFramebufferRenderbuffer.xml',
			'glFramebufferTextureLayer.xml',
			'glFramebufferTexture.xml',
			'glFrontFace.xml',
			'glGenBuffers.xml',
			'glGenerateMipmap.xml',
			'glGenFramebuffers.xml',
			'glGenProgramPipelines.xml',
			'glGenQueries.xml',
			'glGenRenderbuffers.xml',
			'glGenSamplers.xml',
			'glGenTextures.xml',
			'glGenTransformFeedbacks.xml',
			'glGenVertexArrays.xml',
			'glGetActiveAttrib.xml',
			'glGetActiveSubroutineName.xml',
			'glGetActiveSubroutineUniformName.xml',
			'glGetActiveSubroutineUniform.xml',
			'glGetActiveUniformBlockName.xml',
			'glGetActiveUniformBlock.xml',
			'glGetActiveUniformName.xml',
			'glGetActiveUniformsiv.xml',
			'glGetActiveUniform.xml',
			'glGetAttachedShaders.xml',
			'glGetAttribLocation.xml',
			'glGetBufferParameter.xml',
			'glGetBufferPointerv.xml',
			'glGetBufferSubData.xml',
			'glGetCompressedTexImage.xml',
			'glGetError.xml',
			'glGetFragDataIndex.xml',
			'glGetFragDataLocation.xml',
			'glGetFramebufferAttachmentParameter.xml',
			'glGetMultisample.xml',
			'glGetProgramBinary.xml',
			'glGetProgramInfoLog.xml',
			'glGetProgramPipelineInfoLog.xml',
			'glGetProgramPipeline.xml',
			'glGetProgramStage.xml',
			'glGetProgram.xml',
			'glGetQueryIndexed.xml',
			'glGetQueryiv.xml',
			'glGetQueryObject.xml',
			'glGetRenderbufferParameter.xml',
			'glGetSamplerParameter.xml',
			'glGetShaderInfoLog.xml',
			'glGetShaderPrecisionFormat.xml',
			'glGetShaderSource.xml',
			'glGetShader.xml',
			'glGetString.xml',
			'glGetSubroutineIndex.xml',
			'glGetSubroutineUniformLocation.xml',
			'glGetSync.xml',
			'glGetTexImage.xml',
			'glGetTexLevelParameter.xml',
			'glGetTexParameter.xml',
			'glGetTransformFeedbackVarying.xml',
			'glGetUniformBlockIndex.xml',
			'glGetUniformIndices.xml',
			'glGetUniformLocation.xml',
			'glGetUniformSubroutine.xml',
			'glGetUniform.xml',
			'glGetVertexAttribPointerv.xml',
			'glGetVertexAttrib.xml',
			'glGet.xml',
			'glHint.xml',
			'glIsBuffer.xml',
			'glIsEnabled.xml',
			'glIsFramebuffer.xml',
			'glIsProgramPipeline.xml',
			'glIsProgram.xml',
			'glIsQuery.xml',
			'glIsRenderbuffer.xml',
			'glIsSampler.xml',
			'glIsShader.xml',
			'glIsSync.xml',
			'glIsTexture.xml',
			'glIsTransformFeedback.xml',
			'glIsVertexArray.xml',
			'glLineWidth.xml',
			'glLinkProgram.xml',
			'glLogicOp.xml',
			'glMapBufferRange.xml',
			'glMapBuffer.xml',
			'glMinSampleShading.xml',
			'glMultiDrawArrays.xml',
			'glMultiDrawElementsBaseVertex.xml',
			'glMultiDrawElements.xml',
			'glPatchParameter.xml',
			'glPauseTransformFeedback.xml',
			'glPixelStore.xml',
			'glPointParameter.xml',
			'glPointSize.xml',
			'glPolygonMode.xml',
			'glPolygonOffset.xml',
			'glPrimitiveRestartIndex.xml',
			'glProgramBinary.xml',
			'glProgramParameter.xml',
			'glProgramUniform.xml',
			'glProvokingVertex.xml',
			'glQueryCounter.xml',
			'glReadBuffer.xml',
			'glReadPixels.xml',
			'glReleaseShaderCompiler.xml',
			'glRenderbufferStorageMultisample.xml',
			'glRenderbufferStorage.xml',
			'glResumeTransformFeedback.xml',
			'glSampleCoverage.xml',
			'glSampleMaski.xml',
			'glSamplerParameter.xml',
			'glScissorArray.xml',
			'glScissorIndexed.xml',
			'glScissor.xml',
			'glShaderBinary.xml',
			'glShaderSource.xml',
			'glStencilFuncSeparate.xml',
			'glStencilFunc.xml',
			'glStencilMaskSeparate.xml',
			'glStencilMask.xml',
			'glStencilOpSeparate.xml',
			'glStencilOp.xml',
			'glTexBuffer.xml',
			'glTexImage1D.xml',
			'glTexImage2DMultisample.xml',
			'glTexImage2D.xml',
			'glTexImage3DMultisample.xml',
			'glTexImage3D.xml',
			'glTexParameter.xml',
			'glTexSubImage1D.xml',
			'glTexSubImage2D.xml',
			'glTexSubImage3D.xml',
			'glTransformFeedbackVaryings.xml',
			'glUniformBlockBinding.xml',
			'glUniformSubroutines.xml',
			'glUniform.xml',
			'glUseProgramStages.xml',
			'glUseProgram.xml',
			'glValidateProgramPipeline.xml',
			'glValidateProgram.xml',
			'glVertexAttribDivisor.xml',
			'glVertexAttribPointer.xml',
			'glVertexAttrib.xml',
			'glViewportArray.xml',
			'glViewportIndexed.xml',
			'glViewport.xml',
			'glWaitSync.xml',
		]
	},
	'glu' : {
		'format' : 'docbook',
		'base' : 'http://www.opengl.org/sdk/docs/man/',
		'list' : [
			'gluBeginCurve.xml',
			'gluBeginPolygon.xml',
			'gluBeginSurface.xml',
			'gluBeginTrim.xml',
			'gluBuild1DMipmapLevels.xml',
			'gluBuild1DMipmaps.xml',
			'gluBuild2DMipmapLevels.xml',
			'gluBuild2DMipmaps.xml',
			'gluBuild3DMipmapLevels.xml',
			'gluBuild3DMipmaps.xml',
			'gluCheckExtension.xml',
			'gluCylinder.xml',
			'gluDeleteNurbsRenderer.xml',
			'gluDeleteQuadric.xml',
			'gluDeleteTess.xml',
			'gluDisk.xml',
			'gluErrorString.xml',
			'gluGetNurbsProperty.xml',
			'gluGetString.xml',
			'gluGetTessProperty.xml',
			'gluLoadSamplingMatrices.xml',
			'gluLookAt.xml',
			'gluNewNurbsRenderer.xml',
			'gluNewQuadric.xml',
			'gluNewTess.xml',
			'gluNextContour.xml',
			'gluNurbsCallbackDataEXT.xml',
			'gluNurbsCallbackData.xml',
			'gluNurbsCallback.xml',
			'gluNurbsCurve.xml',
			'gluNurbsProperty.xml',
			'gluNurbsSurface.xml',
			'gluOrtho2D.xml',
			'gluPartialDisk.xml',
			'gluPerspective.xml',
			'gluPickMatrix.xml',
			'gluProject.xml',
			'gluPwlCurve.xml',
			'gluQuadricCallback.xml',
			'gluQuadricDrawStyle.xml',
			'gluQuadricNormals.xml',
			'gluQuadricOrientation.xml',
			'gluQuadricTexture.xml',
			'gluScaleImage.xml',
			'gluSphere.xml',
			'gluTessBeginContour.xml',
			'gluTessBeginPolygon.xml',
			'gluTessCallback.xml',
			'gluTessEndPolygon.xml',
			'gluTessNormal.xml',
			'gluTessProperty.xml',
			'gluTessVertex.xml',
			'gluUnProject4.xml',
			'gluUnProject.xml',
		]
	},
	'glx' : {
		'format' : 'docbook',
		'base' : 'http://www.opengl.org/sdk/docs/man/',
		'list' : [
			'glXChooseFBConfig.xml',
			'glXChooseVisual.xml',
			'glXCopyContext.xml',
			'glXCreateContext.xml',
			'glXCreateGLXPixmap.xml',
			'glXCreateNewContext.xml',
			'glXCreatePbuffer.xml',
			'glXCreatePixmap.xml',
			'glXCreateWindow.xml',
			'glXDestroyContext.xml',
			'glXDestroyGLXPixmap.xml',
			'glXDestroyPbuffer.xml',
			'glXDestroyPixmap.xml',
			'glXDestroyWindow.xml',
			'glXFreeContextEXT.xml',
			'glXGetClientString.xml',
			'glXGetConfig.xml',
			'glXGetContextIDEXT.xml',
			'glXGetCurrentContext.xml',
			'glXGetCurrentDisplay.xml',
			'glXGetCurrentDrawable.xml',
			'glXGetCurrentReadDrawable.xml',
			'glXGetFBConfigAttrib.xml',
			'glXGetFBConfigs.xml',
			'glXGetProcAddress.xml',
			'glXGetSelectedEvent.xml',
			'glXGetVisualFromFBConfig.xml',
			'glXImportContextEXT.xml',
			'glXIntro.xml',
			'glXIsDirect.xml',
			'glXMakeContextCurrent.xml',
			'glXMakeCurrent.xml',
			'glXQueryContextInfoEXT.xml',
			'glXQueryContext.xml',
			'glXQueryDrawable.xml',
			'glXQueryExtensionsString.xml',
			'glXQueryExtension.xml',
			'glXQueryServerString.xml',
			'glXQueryVersion.xml',
			'glXSelectEvent.xml',
			'glXSwapBuffers.xml',
			'glXUseXFont.xml',
			'glXWaitGL.xml',
			'glXWaitX.xml',
		]
	},
	'glext' : {
		'format' : 'extspec',
		'base' : 'http://www.opengl.org/registry/specs/',
		'list' : [
			'3DFX/multisample.txt',
			'3DFX/tbuffer.txt',
			'3DFX/texture_compression_FXT1.txt',
			'3DL/stereo_control.txt',
			'AMD/conservative_depth.txt',
			'AMD/debug_output.txt',
			'AMD/depth_clamp_separate.txt',
			'AMD/draw_buffers_blend.txt',
			'AMD/gpu_association.txt',
			'AMD/name_gen_delete.txt',
			'AMD/performance_monitor.txt',
			'AMD/seamless_cubemap_per_texture.txt',
			'AMD/shader_stencil_export.txt',
			'AMD/texture_texture4.txt',
			'AMD/transform_feedback3_lines_triangles.txt',
			'AMD/vertex_shader_tessellator.txt',
			'APPLE/aux_depth_stencil.txt',
			'APPLE/client_storage.txt',
			'APPLE/element_array.txt',
			'APPLE/fence.txt',
			'APPLE/float_pixels.txt',
			'APPLE/flush_buffer_range.txt',
			'APPLE/object_purgeable.txt',
			'APPLE/rgb_422.txt',
			'APPLE/row_bytes.txt',
			'APPLE/specular_vector.txt',
			'APPLE/texture_range.txt',
			'APPLE/transform_hint.txt',
			'APPLE/vertex_array_object.txt',
			'APPLE/vertex_array_range.txt',
			'APPLE/vertex_program_evaluators.txt',
			'APPLE/ycbcr_422.txt',
			'ARB/blend_func_extended.txt',
			'ARB/buffer_region.txt',
			'ARB/cl_event.txt',
			'ARB/color_buffer_float.txt',
			'ARB/compatibility.txt',
			'ARB/copy_buffer.txt',
			'ARB/create_context.txt',
			'ARB/create_context_profile.txt',
			'ARB/create_context_robustness.txt',
			'ARB/debug_output.txt',
			'ARB/depth_buffer_float.txt',
			'ARB/depth_clamp.txt',
			'ARB/depth_texture.txt',
			'ARB/draw_buffers.txt',
			'ARB/draw_buffers_blend.txt',
			'ARB/draw_elements_base_vertex.txt',
			'ARB/draw_indirect.txt',
			'ARB/draw_instanced.txt',
			'ARB/ES2_compatibility.txt',
			'ARB/explicit_attrib_location.txt',
			'ARB/extensions_string.txt',
			'ARB/fragment_coord_conventions.txt',
			'ARB/fragment_program.txt',
			'ARB/fragment_program_shadow.txt',
			'ARB/fragment_shader.txt',
			'ARB/framebuffer_object.txt',
			'ARB/framebuffer_sRGB.txt',
			'ARB/geometry_shader4.txt',
			'ARB/get_proc_address.txt',
			'ARB/get_program_binary.txt',
			'ARB/gpu_shader5.txt',
			'ARB/gpu_shader_fp64.txt',
			'ARB/half_float_pixel.txt',
			'ARB/half_float_vertex.txt',
			'ARB/instanced_arrays.txt',
			'ARB/make_current_read.txt',
			'ARB/map_buffer_range.txt',
			'ARB/matrix_palette.txt',
			'ARB/multisample.txt',
			'ARB/multitexture.txt',
			'ARB/occlusion_query.txt',
			'ARB/occlusion_query2.txt',
			'ARB/pbuffer.txt',
			'ARB/pixel_buffer_object.txt',
			'ARB/pixel_format.txt',
			'ARB/point_parameters.txt',
			'ARB/point_sprite.txt',
			'ARB/provoking_vertex.txt',
			'ARB/render_texture.txt',
			'ARB/robustness.txt',
			'ARB/sampler_objects.txt',
			'ARB/sample_shading.txt',
			'ARB/seamless_cube_map.txt',
			'ARB/separate_shader_objects.txt',
			'ARB/shader_bit_encoding.txt',
			'ARB/shader_objects.txt',
			'ARB/shader_precision.txt',
			'ARB/shader_stencil_export.txt',
			'ARB/shader_subroutine.txt',
			'ARB/shader_texture_lod.txt',
			'ARB/shading_language_100.txt',
			'ARB/shading_language_include.txt',
			'ARB/shadow.txt',
			'ARB/shadow_ambient.txt',
			'ARB/sync.txt',
			'ARB/tessellation_shader.txt',
			'ARB/texture_border_clamp.txt',
			'ARB/texture_buffer_object.txt',
			'ARB/texture_buffer_object_rgb32.txt',
			'ARB/texture_compression.txt',
			'ARB/texture_compression_bptc.txt',
			'ARB/texture_compression_rgtc.txt',
			'ARB/texture_cube_map.txt',
			'ARB/texture_cube_map_array.txt',
			'ARB/texture_env_add.txt',
			'ARB/texture_env_combine.txt',
			'ARB/texture_env_crossbar.txt',
			'ARB/texture_env_dot3.txt',
			'ARB/texture_float.txt',
			'ARB/texture_gather.txt',
			'ARB/texture_mirrored_repeat.txt',
			'ARB/texture_multisample.txt',
			'ARB/texture_non_power_of_two.txt',
			'ARB/texture_query_lod.txt',
			'ARB/texture_rectangle.txt',
			'ARB/texture_rg.txt',
			'ARB/texture_rgb10_a2ui.txt',
			'ARB/texture_swizzle.txt',
			'ARB/timer_query.txt',
			'ARB/transform_feedback2.txt',
			'ARB/transform_feedback3.txt',
			'ARB/transpose_matrix.txt',
			'ARB/uniform_buffer_object.txt',
			'ARB/vertex_array_bgra.txt',
			'ARB/vertex_array_object.txt',
			'ARB/vertex_attrib_64bit.txt',
			'ARB/vertex_blend.txt',
			'ARB/vertex_buffer_object.txt',
			'ARB/vertex_program.txt',
			'ARB/vertex_shader.txt',
			'ARB/vertex_type_2_10_10_10_rev.txt',
			'ARB/viewport_array.txt',
			'ARB/window_pos.txt',
			'ATI/draw_buffers.txt',
			'ATI/element_array.txt',
			'ATI/envmap_bumpmap.txt',
			'ATI/fragment_shader.txt',
			'ATI/map_object_buffer.txt',
			'ATI/meminfo.txt',
			'ATI/pixel_format_float.txt',
			'ATI/pn_triangles.txt',
			'ATI/separate_stencil.txt',
			'ATI/text_fragment_shader.txt',
			'ATI/texture_env_combine3.txt',
			'ATI/texture_float.txt',
			'ATI/texture_mirror_once.txt',
			'ATI/vertex_array_object.txt',
			'ATI/vertex_attrib_array_object.txt',
			'ATI/vertex_streams.txt',
			'EXT/422_pixels.txt',
			'EXT/abgr.txt',
			'EXT/bgra.txt',
			'EXT/bindable_uniform.txt',
			'EXT/blend_color.txt',
			'EXT/blend_equation_separate.txt',
			'EXT/blend_func_separate.txt',
			'EXT/blend_logic_op.txt',
			'EXT/blend_minmax.txt',
			'EXT/blend_subtract.txt',
			'EXT/clip_volume_hint.txt',
			'EXT/cmyka.txt',
			'EXT/color_subtable.txt',
			'EXT/compiled_vertex_array.txt',
			'EXT/convolution.txt',
			'EXT/coordinate_frame.txt',
			'EXT/copy_texture.txt',
			'EXT/create_context_es2_profile.txt',
			'EXT/cull_vertex.txt',
			'EXT/depth_bounds_test.txt',
			'EXT/depth_float.txt',
			'EXT/direct_state_access.txt',
			'EXT/display_color_table.txt',
			'EXT/draw_buffers2.txt',
			'EXT/draw_instanced.txt',
			'EXT/draw_range_elements.txt',
			'EXT/extensions_string.txt',
			'EXT/fog_coord.txt',
			'EXT/fragment_lighting.txt',
			'EXT/framebuffer_blit.txt',
			'EXT/framebuffer_multisample.txt',
			'EXT/framebuffer_object.txt',
			'EXT/framebuffer_sRGB.txt',
			'EXT/geometry_shader4.txt',
			'EXT/gpu_program_parameters.txt',
			'EXT/gpu_shader4.txt',
			'EXT/histogram.txt',
			'EXT/import_context.txt',
			'EXT/index_array_formats.txt',
			'EXT/index_func.txt',
			'EXT/index_material.txt',
			'EXT/index_texture.txt',
			'EXT/light_texture.txt',
			'EXT/make_current_read.txt',
			'EXT/misc_attribute.txt',
			'EXT/multi_draw_arrays.txt',
			'EXT/multisample.txt',
			'EXT/nurbs_tessellator.txt',
			'EXT/object_space_tess.txt',
			'EXT/packed_depth_stencil.txt',
			'EXT/packed_float.txt',
			'EXT/packed_pixels.txt',
			'EXT/paletted_texture.txt',
			'EXT/pbuffer.txt',
			'EXT/pixel_buffer_object.txt',
			'EXT/pixel_format.txt',
			'EXT/pixel_transform.txt',
			'EXT/pixel_transform_color_table.txt',
			'EXT/point_parameters.txt',
			'EXT/polygon_offset.txt',
			'EXT/provoking_vertex.txt',
			'EXT/rescale_normal.txt',
			'EXT/scene_marker.txt',
			'EXT/secondary_color.txt',
			'EXT/separate_shader_objects.txt',
			'EXT/separate_specular_color.txt',
			'EXT/shader_image_load_store.txt',
			'EXT/shadow_funcs.txt',
			'EXT/shared_texture_palette.txt',
			'EXT/stencil_clear_tag.txt',
			'EXT/stencil_two_side.txt',
			'EXT/stencil_wrap.txt',
			'EXT/subtexture.txt',
			'EXT/swap_control.txt',
			'EXT/texture.txt',
			'EXT/texture3D.txt',
			'EXT/texture_array.txt',
			'EXT/texture_buffer_object.txt',
			'EXT/texture_compression_dxt1.txt',
			'EXT/texture_compression_latc.txt',
			'EXT/texture_compression_rgtc.txt',
			'EXT/texture_compression_s3tc.txt',
			'EXT/texture_env.txt',
			'EXT/texture_env_add.txt',
			'EXT/texture_env_combine.txt',
			'EXT/texture_env_dot3.txt',
			'EXT/texture_filter_anisotropic.txt',
			'EXT/texture_from_pixmap.txt',
			'EXT/texture_integer.txt',
			'EXT/texture_lod_bias.txt',
			'EXT/texture_mirror_clamp.txt',
			'EXT/texture_object.txt',
			'EXT/texture_perturb_normal.txt',
			'EXT/texture_shared_exponent.txt',
			'EXT/texture_snorm.txt',
			'EXT/texture_sRGB.txt',
			'EXT/texture_sRGB_decode.txt',
			'EXT/texture_swizzle.txt',
			'EXT/timer_query.txt',
			'EXT/transform_feedback.txt',
			'EXT/vertex_array.txt',
			'EXT/vertex_array_bgra.txt',
			'EXT/vertex_attrib_64bit.txt',
			'EXT/vertex_shader.txt',
			'EXT/vertex_weighting.txt',
			'EXT/visual_info.txt',
			'EXT/visual_rating.txt',
			'GREMEDY/frame_terminator.txt',
			'GREMEDY/string_marker.txt',
			'HP/convolution_border_modes.txt',
			'HP/image_transform.txt',
			'HP/occlusion_test.txt',
			'HP/texture_lighting.txt',
			'I3D/digital_video_control.txt',
			'I3D/gamma.txt',
			'I3D/genlock.txt',
			'I3D/image_buffer.txt',
			'I3D/swap_frame_lock.txt',
			'I3D/swap_frame_usage.txt',
			'IBM/cull_vertex.txt',
			'IBM/multimode_draw_arrays.txt',
			'IBM/rasterpos_clip.txt',
			'IBM/static_data.txt',
			'IBM/texture_mirrored_repeat.txt',
			'IBM/vertex_array_lists.txt',
			'INGR/color_clamp.txt',
			'INGR/interlace_read.txt',
			'INTEL/parallel_arrays.txt',
			'INTEL/swap_event.txt',
			'INTEL/texture_scissor.txt',
			'MESA/agp_offset.txt',
			'MESA/copy_sub_buffer.txt',
			'MESA/pack_invert.txt',
			'MESA/pixmap_colormap.txt',
			'MESA/release_buffers.txt',
			'MESA/resize_buffers.txt',
			'MESA/set_3dfx_mode.txt',
			'MESA/window_pos.txt',
			'MESAX/texture_stack.txt',
			'MESA/ycbcr_texture.txt',
			'NV/blend_square.txt',
			'NV/conditional_render.txt',
			'NV/copy_depth_to_color.txt',
			'NV/copy_image.txt',
			'NV/depth_buffer_float.txt',
			'NV/depth_clamp.txt',
			'NV/evaluators.txt',
			'NV/explicit_multisample.txt',
			'NV/fence.txt',
			'NV/float_buffer.txt',
			'NV/fog_distance.txt',
			'NV/fragment_program.txt',
			'NV/fragment_program2.txt',
			'NV/fragment_program4.txt',
			'NV/fragment_program_option.txt',
			'NV/framebuffer_multisample_coverage.txt',
			'NV/geometry_program4.txt',
			'NV/geometry_shader4.txt',
			'NV/gpu_affinity.txt',
			'NV/gpu_program4.txt',
			'NV/gpu_program5.txt',
			'NV/gpu_shader5.txt',
			'NV/half_float.txt',
			'NV/light_max_exponent.txt',
			'NV/multisample_coverage.txt',
			'NV/multisample_filter_hint.txt',
			'NV/occlusion_query.txt',
			'NV/packed_depth_stencil.txt',
			'NV/parameter_buffer_object.txt',
			'NV/parameter_buffer_object2.txt',
			'NV/pixel_data_range.txt',
			'NV/point_sprite.txt',
			'NV/present_video.txt',
			'NV/primitive_restart.txt',
			'NV/register_combiners.txt',
			'NV/register_combiners2.txt',
			'NV/render_depth_texture.txt',
			'NV/render_texture_rectangle.txt',
			'NV/shader_buffer_load.txt',
			'NV/shader_buffer_store.txt',
			'NV/swap_group.txt',
			'NV/tessellation_program5.txt',
			'NV/texgen_emboss.txt',
			'NV/texgen_reflection.txt',
			'NV/texture_barrier.txt',
			'NV/texture_compression_vtc.txt',
			'NV/texture_env_combine4.txt',
			'NV/texture_expand_normal.txt',
			'NV/texture_rectangle.txt',
			'NV/texture_shader.txt',
			'NV/texture_shader2.txt',
			'NV/texture_shader3.txt',
			'NV/transform_feedback.txt',
			'NV/transform_feedback2.txt',
			'NV/vdpau_interop.txt',
			'NV/vertex_array_range.txt',
			'NV/vertex_array_range2.txt',
			'NV/vertex_attrib_integer_64bit.txt',
			'NV/vertex_buffer_unified_memory.txt',
			'NV/vertex_program.txt',
			'NV/vertex_program1_1.txt',
			'NV/vertex_program2.txt',
			'NV/vertex_program2_option.txt',
			'NV/vertex_program3.txt',
			'NV/vertex_program4.txt',
			'NV/video_capture.txt',
			'NV/video_output.txt',
			'OES/byte_coordinates.txt',
			'OES/compressed_paletted_texture.txt',
			'OES/fixed_point.txt',
			'OES/query_matrix.txt',
			'OES/read_format.txt',
			'OES/single_precision.txt',
			'OML/interlace.txt',
			'OML/resample.txt',
			'OML/subsample.txt',
			'OML/swap_method.txt',
			'OML/sync_control.txt',
			'PGI/misc_hints.txt',
			'PGI/vertex_hints.txt',
			'REND/screen_coordinates.txt',
			'S3/s3tc.txt',
			'SGI/color_matrix.txt',
			'SGI/color_table.txt',
			'SGI/cushion.txt',
			'SGI/filter4_parameters.txt',
			'SGI/make_current_read.txt',
			'SGIS/blended_overlay.txt',
			'SGIS/color_range.txt',
			'SGIS/detail_texture.txt',
			'SGIS/fog_function.txt',
			'SGIS/generate_mipmap.txt',
			'SGIS/multisample.txt',
			'SGIS/pixel_texture.txt',
			'SGIS/point_line_texgen.txt',
			'SGIS/sharpen_texture.txt',
			'SGIS/texture4D.txt',
			'SGIS/texture_border_clamp.txt',
			'SGIS/texture_color_mask.txt',
			'SGIS/texture_edge_clamp.txt',
			'SGIS/texture_filter4.txt',
			'SGIS/texture_lod.txt',
			'SGIS/texture_select.txt',
			'SGI/swap_control.txt',
			'SGI/texture_color_table.txt',
			'SGI/video_sync.txt',
			'SGIX/async.txt',
			'SGIX/async_histogram.txt',
			'SGIX/async_pixel.txt',
			'SGIX/blend_alpha_minmax.txt',
			'SGIX/clipmap.txt',
			'SGIX/convolution_accuracy.txt',
			'SGIX/depth_texture.txt',
			'SGIX/dm_buffer.txt',
			'SGIX/fbconfig.txt',
			'SGIX/flush_raster.txt',
			'SGIX/fog_offset.txt',
			'SGIX/framezoom.txt',
			'SGIX/hyperpipe.txt',
			'SGIX/instruments.txt',
			'SGIX/interlace.txt',
			'SGIX/ir_instrument1.txt',
			'SGIX/list_priority.txt',
			'SGIX/pbuffer.txt',
			'SGIX/pixel_texture.txt',
			'SGIX/pixel_texture_bits.txt',
			'SGIX/reference_plane.txt',
			'SGIX/resample.txt',
			'SGIX/shadow.txt',
			'SGIX/shadow_ambient.txt',
			'SGIX/sprite.txt',
			'SGIX/swap_barrier.txt',
			'SGIX/swap_group.txt',
			'SGIX/tag_sample_buffer.txt',
			'SGIX/texture_add_env.txt',
			'SGIX/texture_coordinate_clamp.txt',
			'SGIX/texture_lod_bias.txt',
			'SGIX/texture_multi_buffer.txt',
			'SGIX/texture_range.txt',
			'SGIX/texture_scale_bias.txt',
			'SGIX/vertex_preclip.txt',
			'SGIX/video_resize.txt',
			'SGIX/video_source.txt',
			'SGIX/visual_select_group.txt',
			'SGIX/ycrcb.txt',
			'SUN/convolution_border_modes.txt',
			'SUN/get_transparent_index.txt',
			'SUN/global_alpha.txt',
			'SUN/mesh_array.txt',
			'SUN/slice_accum.txt',
			'SUN/triangle_list.txt',
			'SUN/vertex.txt',
			'SUNX/constant_data.txt',
			'WIN/phong_shading.txt',
			'WIN/specular_fog.txt',
		]
	}
}

# At least this is less ugly than Khronos specifications
FIXES = {
	# This function prototype will never be parsed
	'http://www.opengl.org/registry/specs/SGIS/texture_color_mask.txt' : lambda x : x.replace(
		'void TextureColorMaskSGIS(boolean r, boolean g, boolean, b, boolean a );',
		'void TextureColorMaskSGIS(boolean r, boolean g, boolean b, boolean a );'
	),
	# This makes the parsing more difficult
	'http://www.opengl.org/registry/specs/IBM/multimode_draw_arrays.txt' : lambda x : x.replace(
		'sizeof(GLenum)',
		'size of GLenum'
	),
	# This makes the parsing more difficult
	'http://www.opengl.org/registry/specs/SGIX/instruments.txt' : lambda x : x.replace(
		'    An example of using the calls to test the extension:',
		'Misc\n    An example of using the calls to test the extension:'
	),
	# Someone forgot to put a name on the last parameter
	'http://www.opengl.org/registry/specs/MESA/window_pos.txt' : lambda x : x.replace(
		'void WindowPos4dMESA(double x, double y, double z, double )',
		'void WindowPos4dMESA(double x, double y, double z, double w)'
	),
	# This makes the parsing more difficult
	'http://www.opengl.org/registry/specs/ARB/get_proc_address.txt' : lambda x : x.replace(
		'void (*glXGetProcAddressARB(const GLubyte *procName))(...)',
		'GLfunction glXGetProcAddressARB(const GLubyte *procName)'
	),

}

# An ugly XLST stylesheet to render the documentation
XSLT_params = etree.XSLT(etree.XML('''
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:template match="variablelist">
		<root><xsl:apply-templates/></root>
	</xsl:template>

	<xsl:variable name='space'><xsl:text> </xsl:text></xsl:variable>
	<xsl:variable name='newline'><xsl:text>
</xsl:text></xsl:variable>

	<xsl:template match="text()">
		<xsl:if test="normalize-space(.)">
			<xsl:value-of select="normalize-space(.)"/>
			<xsl:value-of select="$space" />
		</xsl:if>
	</xsl:template>

	<xsl:template match="para">
		<xsl:apply-templates/>
		<xsl:value-of select="$newline" />
		<xsl:value-of select="$newline" />
	</xsl:template>
</xsl:stylesheet>
'''))

class ManpageParser:
	'''A class to parse Khronos OpenGL docbook man pages'''

	def __init__(self, name):
		self.library = Library(name)

	def parse_file(self, file):
		dom = etree.parse(file)
		lst = FunctionList()
		# decode functions prototypes
		lst = FunctionList()
		funcdef = dom.xpath('/refentry/refsynopsisdiv/funcsynopsis/funcprototype')
		for elem in funcdef:
			type = elem.xpath('funcdef')[0].text.strip()
			name = elem.xpath('funcdef')[0].getchildren()[0].text.strip()
			dfunction = Function(name, type)
			paramdef = elem.xpath('paramdef')
			for elem in paramdef:
				if elem.text == None:
					break
				type = elem.text.strip()
				name = elem.xpath('parameter')
				if len(name) > 0:
					name = name[0].text.strip()
					dfunction.addParameter(type, name)
			lst.append(dfunction)
		# decode functions documentation
		ref1 = dom.xpath('/refentry/refnamediv/refname')[0].text.strip()
		ref2 = dom.xpath('/refentry/refnamediv/refpurpose')[0].text.strip()
		ddoc = '%s - %s\n\n' % (ref1, ref2)
		lst.addDocumentation(ddoc)
		variablelist = dom.xpath('/refentry/refsect1[@id="parameters"]/variablelist')
		if False and len(variablelist) > 0: # FIXME
			variablelist = variablelist[0]
			node = XSLT_params(variablelist)
			ddoc = unicode(node.getroot().text)
			lst.addDocumentation(ddoc)
		self.library.append(lst)

class EnumerantParser:
	'''A class to parse Khronos OpenGL .spec'''
	pass

class ExtensionParser:
	'''A class to parse Khronos extensions specifications,
	most of the regular expressions and code logic comes from Glew 
	git://glew.git.sourceforge.net/glew/glew/auto/bin/parse_spec.pl'''

	re = {
		'name'     : re.compile(r'^([a-z0-9]+)_([a-z0-9_]+)', flags=re.IGNORECASE),
		'AtoZ'     : re.compile(r'^[A-Z]'),
		'eofunc'   : re.compile(r'.*(?:\);?$|^$)'),
		'extname'  : re.compile(r'^[A-Z][A-Za-z0-9_]+$'),
		'none'     : re.compile(r'^\(none\)$'),
		'function' : re.compile(r'^(.+) ([a-z][a-z0-9_]*) \((.+)\)$', flags = re.IGNORECASE),
		'prefix'   : re.compile(r'^(?:[aw]?gl|glX)'),
		'tprefix'  : re.compile(r'^(?:[AW]?GL|GLX)_'),
		'token'    : re.compile(r'^([A-Z0-9][A-Z0-9_x]*):?\s+((?:0x)?[0-9A-F]+)(.*)$'),
	}

	extensions = {}

	@staticmethod
	def clean_function(str):
		str = re.sub(r' +', ' ', str)
		str = re.sub(r'<.*>', '',  str)
		str = re.sub(r'<.*', '',  str)
		str = re.sub(r'\s*\(\s*', ' (',  str)
		str = re.sub(r'\s*\)\s*', ')', str)
		str = re.sub(r'\s*\*([a-zA-Z])', '* \\1', str)
		str = re.sub(r'\*wgl', '* wgl', str)
		str = re.sub(r'\*glX', '* glX', str)
		str = re.sub(r'\.\.\.', 'void', str)
		str = re.sub(r'\.\.\.', 'void', str)
		str = re.sub(r';$', '', str)
		return str

	def parse_file(self, file):
		file = Resolver.cache(file)
		lines = open(file, 'r').read().splitlines()
		section = None
		for line in lines:
			line = line.rstrip()
			if re.match(self.re['AtoZ'], line):
				section = line
			elif section:
				line = line.lstrip()
				self.parse_line(line, section)

	_extension = None 
	_func = ""
	def parse_line(self, line, section):
		if section == 'Name':
			m = re.match(self.re['name'], line)
			if not m:
				return
			self._extension = "%s_%s" % (m.group(1), m.group(2))
			self.extensions[self._extension] = {
				'funcs' : [],
				'enums' : [],
				'names' : [],
			}
		if section == 'Name String' or section == 'Name Strings':
			m = re.match(self.re['name'], line)
			if m:
				self.extensions[self._extension]["names"].append(self._extension)
			m = re.match(self.re['extname'], line)
			if m:
				name = m.group(0)
				m = re.match(self.re['tprefix'], line)
				if not m:
					name = "GL_" + name
				self.extensions[self._extension]["names"].append(name)
		if section == 'New Procedures and Functions':
			m = re.match(self.re['eofunc'], line)
			if m:
				self._func += ' %s' % line
				self._func = ExtensionParser.clean_function(self._func)
				m = re.match(self.re['function'], self._func)
				if m:
					type     = self.resolve_type(m.group(1).strip())
					name     = m.group(2)
					function = Function(name, type)
					params = m.group(3)
					for param in map(lambda x: x.strip().split(), params.split(',')):
						if len(param) == 1 and param[0] == 'void':
							continue
						type = self.resolve_type(' '.join(param[0:-1]))
						name = param[-1]
						function.addParameter(type, name)
					self.extensions[self._extension]['funcs'].append(function)
				self._func = ""
			else:
				self._func += ' %s' % line
		if section == 'New Tokens':
			m = re.match(self.re['token'], line)
			if m:
				name  = m.group(1)
				value = m.group(2)
				if not name.startswith('GL_'):
					name = 'GL_' + name
				self.extensions[self._extension]['enums'].append([name, value])
	
	def resolve_type(self, type):
		types = {
			'function'                : 'GLfunction',
			'void'                    : 'GLvoid',
			'boolean'                 : 'GLboolean',
			'Boolean'                 : 'GLboolean',
			'Bool'                    : 'GLboolean',
			'BOOL'                    : 'GLboolean',
			'Boolean'                 : 'GLboolean',
			'bitfield'                : 'GLbitfield',
			'enum'                    : 'GLenum',
			'byte'                    : 'GLbyte',
			'char'                    : 'GLchar',
			'charARB'                 : 'GLchar',
			'ubyte'                   : 'GLubyte',
			'short'                   : 'GLshort',
			'ushort'                  : 'GLushort',
			'int'                     : 'GLint',
			'unsignedint'             : 'GLuint',
			'UINT'                    : 'GLuint',
			'uint'                    : 'GLuint',
			'uint'                    : 'GLuint',
			'half'                    : 'GLhalf',
			'long'                    : 'GLlong',
			'unsignedlong'            : 'GLulong',
			'float'                   : 'GLfloat',
			'double'                  : 'GLdouble',
			'clampf'                  : 'GLclampf',
			'clampd'                  : 'GLclampd',
			'int64EXT'                : 'GLint64',
			'int64'                   : 'GLint64',
			'uint64EXT'               : 'GLuint64',
			'int64EXT'                : 'GLint64',
			'uint64'                  : 'GLuint64',
			'uint64EXT'               : 'GLuint64',
			'sizeiptr'                : 'GLsizeiptr',
			'intptr'                  : 'GLintptr',
			'intptrARB'               : 'GLintptr',
			'sizei'                   : 'GLsizei',
			'sizeiptrARB'             : 'GLsizeiptr',
			'handleARB'               : 'GLhandle',
			'sync'                    : 'GLsync',
			'vdpauSurfaceNV'          : 'GLvdpauSurfaceNV',
			'XContext'                : 'GLXContext',
			'XDrawable'               : 'GLXDrawable',
			'XPixmap'                 : 'GLXPixmap',
			'XVideoSourceSGIX'        : 'GLXVideoSourceSGIX',
			'XVideoCaptureDeviceNV'   : 'GLXVideoCaptureDeviceNV',
			'XFBConfigID'             : 'XID',
			'XContextID'              : 'XID',
			'XWindow'                 : 'XID',
			'XPbuffer'                : 'XID',
			'XFBConfigIDSGIX'         : 'XID',
			'XFBConfigSGIX'           : 'void*',
			'XFBConfig'               : 'void*',
			'DEBUGPROCAMD'            : 'GLDEBUGPROCAMD',
			'DEBUGPROCARB'            : 'GLDEBUGPROCARB',
			'DMbuffer'                : 'void*',
			'Display'                 : 'Display',
			'Window'                  : 'Window',
			'Pixmap'                  : 'Pixmap',
			'Status'                  : 'Status',
			'Colormap'                : 'Colormap',
			'XVisualInfo'             : 'XVisualInfo',
			'HDC'                     : 'HDC',
			'VLNode'                  : 'VLNode',
			'VLPath'                  : 'VLPath',
			'VLServer'                : 'VLServer',
			'handleARB'               : 'handleARB',
			'HVIDEOOUTPUTDEVICENV'    : 'HVIDEOOUTPUTDEVICENV',
			'HVIDEOINPUTDEVICENV'     : 'HVIDEOINPUTDEVICENV',
			'cl_context'              : 'cl_context',
			'cl_event'                : 'cl_event',
		}
		ptrs = type.count('*')
		type = type.replace('*', '')
		type = type.replace(' ', '')
		type = type.replace('const', '')
		if type.startswith('GL') or type.startswith('Gl'):
			type = type[2:]
		if not type in types:
			raise Exception('type not found : %s' % type)
		return types[type] + '*' * ptrs

	def to_extensions(self):
		extensions = ExtensionList()
		for name,ext in self.extensions.items():
			extension = Extension(name)
			for func in ext['funcs']:
				extension.append(func)
			for enum in ext['enums']:
				extension.append(Const(enum[0], enum[1]))
			for name in ext['names']:
				pass # todo: add alias
			extensions.append(extension)
		return extensions

class Documentation(list):
	'''Abstraction class for documentation string'''

	def __init__(self, string = None):
		if string != None:
			self += string.splitlines()

	def toXML(self):
		node = etree.Element('documentation')
		node.text = '\n'.join(self)
		return node

class Module:
	'''Abstraction class for a module (D module, C header, SWIG specification, etc.)'''

	def __init__(self, name):
		self.name       = name
		self.aliases    = AliasList()
		self.libraries  = LibraryList()
		self.extensions = ExtensionList()

	def digest(self, name):
		parser_man = ManpageParser(name)
		parser_ext = ExtensionParser()
		for file in URLS[name]['list']:
			file = '%s%s' % (URLS[name]['base'], file)
			print >> sys.stderr, 'parsing %s' % file
			if URLS[name]['format'] == 'docbook':
				parser_man.parse_file(file)
			if URLS[name]['format'] == 'extspec':
				parser_ext.parse_file(file)
		if len(parser_man.library) > 0:
			self.libraries.append(parser_man.library)
		if len(parser_ext.extensions) > 0:
			self.extensions += parser_ext.to_extensions() #.extensions

	def append(self, object):
		if isinstance(object, Alias):
			self.aliases.append(object)
		if isinstance(object, FunctionList):
			self.functionlists.append(object)

	def toD(self, writer):
 		writer.writeln()
		writer.writeln('module %s;' % self.name)
		writer.writeln()
		for alias in [
			Alias('GLenum',     'uint'),
			Alias('GLboolean',  'ubyte'),
			Alias('GLbitfield', 'uint'),
			Alias('GLvoid',     'void'),
			Alias('GLbyte',     'byte'),
			Alias('GLshort',    'short'),
			Alias('GLint',      'int'),
			Alias('GLubyte',    'ubyte'),
			Alias('GLushort',   'ushort'),
			Alias('GLuint',     'uint'),
			Alias('GLsizei',    'int'),
			Alias('GLfloat',    'float'),
			Alias('GLclampf',   'float'),
			Alias('GLdouble',   'double'),
			Alias('GLclampd',   'double'),
			Alias('GLchar',     'char'),
			Alias('GLintptr',   'ptrdiff_t'),
			Alias('GLsizeptr',  'ptrdiff_t')]:
			alias.toD(writer)
		if len(self.functionlists) > 0:
			writer.writeln()
			writer.writeln('extern(C)')
			writer.writeln('{')
			writer.indent()
			for i, functionlist in enumerate(self.functionlists):
				if i > 0:
					writer.writeln()
					writer.writeln()
				functionlist.toD(writer)
			writer.deindent()
			writer.writeln('}')
		if len(self.extensions) > 0:
			writer.writeln()
			for i, extension in enumerate(self.extensions):
				if i > 0:
					writer.writeln()
				extension.toD(writer)

	def toXML(self):
		node = etree.Element('module', name = self.name)
		node.append(etree.Comment(GENERATION))
		if len(self.aliases):
			node.append(self.aliases.toXML())
		if len(self.libraries):
			node.append(self.libraries.toXML())
		if len(self.extensions):
			node.append(self.extensions.toXML())
		return node

class LibraryList(list):

	def toXML(self):
		node = etree.Element('libraries')
		if len(self) == 0:
			return node
		for item in self:
			node.append(item.toXML())
		return node
		
class Library(list):

	def __init__(self, name):
		self.name = name

	def toXML(self):
		node = etree.Element('library', name = self.name)
		if len(self) == 0:
			return node
		for item in self:
			node.append(item.toXML())
		return node

class ExtensionList(list):

	def toXML(self):
		node = etree.Element('extensions')
		for extension in self:
			node.append(extension.toXML())
		return node

class Extension:
	'''Abstration for OpenGL extension'''

	def __init__(self, name):
		self.name      = name
		self.consts    = ConstList()
		self.functions = FunctionList()
	
	def append(self, object):
		if isinstance(object, Const):
			self.consts.append(object)
		if isinstance(object, Function):
			self.functions.append(object)
	
	def toD(self, writer):
		writer.writeln("struct %s" % self.name)
		writer.writeln("{")
		writer.indent()
		for const in self.consts:
			const.toD(writer)
		if len(self.consts) > 0 and len(self.functions) > 0:
			writer.writeln()
		for function in self.functions:
			function.toD(writer)
		writer.deindent()
		writer.writeln("}")

	def toXML(self):
		node = etree.Element('extension', name = self.name)
		node.append(self.consts.toXML())
		node.append(self.functions.toXML())
		return node

class ConstList(list):

	def toXML(self):
		node = etree.Element('consts')
		for item in self:
			node.append(item.toXML())
		return node

class Const:
	'''Abstraction class for D const'''

	def __init__(self, name, value, type = None):
		self.name  = name
		self.value = value
		self.type  = type
	
	def toD(self, writer):
		writer.write("const ")
		if self.type:
			writer.write("%s " % self.type)
		writer.writeln("%s = %s;" % (self.name, self.value))

	def toXML(self):
		if self.type == None:
			return etree.Element('const',
				name  = self.name,
				value = self.value)
		else:
			return etree.Element('const',
				name  = self.name,
				value = self.value,
				type  = self.type)

class AliasList(list):
	'''Abstraction class for a list of D alias'''

	def toXML(self):
		node = etree.Element("aliases")
		for alias in self:
			node.append(alias.toXML())
		return node

class Alias:
	'''Abstration for D alias'''

	def __init__(self, name, type):
		self.name = name
		self.type = type

	def toD(self, writer):
		writer.writeln('alias %s %s;' % (self.type, self.name))

	def toXML(self):
		return etree.Element('alias',
			name = self.name,
			type = self.type)

class FunctionList(list):
	'''Abstraction class for a list of D functions'''

	def __init__(self):
		self.documentation = Documentation()

	def addDocumentation(self, documentation):
		self.documentation += documentation.splitlines()

	def toD(self, writer):
		writer.writeln('/**')
		for line in self.documentation:
			writer.writeln(' * %s' % line)
		writer.writeln(' */')
		for (i,function) in enumerate(self):
			if i > 0:
				writer.writeln('/// ditto')
			function.toD(writer)

	def toXML(self):
		node = etree.Element("functions")
		if len(self.documentation) > 0:
			node.append(self.documentation.toXML())
		for function in self:
			node.append(function.toXML())
		return node

class Function:
	'''Abstraction class for a D function'''

	def __init__(self, name, type = "void"):
		self.name = name
		self.type = self.typeC2D(type)
		self.params = []

	def addParameter(self, type, name):
		type = self.typeC2D(type)
		name = self.nameC2D(name)
		self.params.append({'type' : type, 'name' : name})

	def nameC2D(self, name):
		if name == 'ref':
			name = '_ref'
		return name

	def typeC2D(self, type):
		if type.startswith('const '):
			type = type[6:]
		if type.startswith('unsigned '):
			type = 'u' + type[9:]
		if type == 'void(*)()':
			type = 'void function()'
		return type

	def toD(self, writer):
		params = map(lambda x: '%s %s' % (x[0], x[1]), self.params)
		params = ', '.join(params)
		writer.writeln('%s %s(%s);' % (self.type, self.name, params))

	def toXML(self):
		node = etree.Element('function',
			type = self.type,
			name = self.name)
		for param in self.params:
			etree.SubElement(node, 'param',
				type = param['type'],
				name = param['name'])
		return node

class Writer:
	'''A very stupid file writer for indentation'''
	def __init__(self, filename):
		self._indent = 0
		self.buffer = ""
		print >> sys.stderr, 'opening %s' % filename
		self.file  = open(filename, 'w')
	def __del__(self):
		print >> sys.stderr, 'done'
		self.file.close()
	def indent(self):
		self._indent += 1
	def deindent(self):
		self._indent -= 1
	def write(self, *args):
		for arg in args:
			self.buffer += arg
	def writeln(self, *args):
		self.file.write('\t' * self._indent)
		self.file.write(self.buffer)
		for arg in args:
			self.file.write(*args)
		self.file.write('\n')
		self.buffer = ""

if __name__ == '__main__':

	from optparse import OptionParser
	parser = OptionParser(usage="usage: %prog [options] <module> <file>")
	parser.add_option('--all',     action='store_true', dest='all',     help='All')
	parser.add_option('--glenums', action='store_true', dest='glenums', help='OpenGL enums')
	parser.add_option('--gl2',     action='store_true', dest='gl2',     help='OpenGL 2')
	parser.add_option('--gl3',     action='store_true', dest='gl3',     help='OpenGL 3')
	parser.add_option('--gl4',     action='store_true', dest='gl4',     help='OpenGL 4')
	parser.add_option('--glu',     action='store_true', dest='glu',     help='GLU')
	parser.add_option('--glx',     action='store_true', dest='glx',     help='GLX')
	parser.add_option('--glext',   action='store_true', dest='glext',   help='OpenGL extensions')
	(options, args) = parser.parse_args()

	if len(args) != 1:
		parser.print_help()
		sys.exit(1)

	module = Module(args[0])

	if options.all or options.glenums:
		module = Module('enums')

	if options.all or options.gl2:
		module.digest('gl2')

	if options.all or options.gl3:
		module.digest('gl3')

	if options.all or options.gl4:
		module.digest('gl4')

	if options.all or options.glu:
		module.digest('glu')

	if options.all or options.glx:
		module.digest('glx')
	
	if options.all or options.glext:
		module.digest('glext')

	#module.toD(Writer(args[1]))
	root = module.toXML()
	data = etree.tostring(root, pretty_print=True)
	open(args[1], "w").write(data)


